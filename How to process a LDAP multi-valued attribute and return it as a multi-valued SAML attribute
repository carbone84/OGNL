https://support.pingidentity.com/s/article/How-to-process-a-LDAP-multi-valued-attribute-and-return-it-as-a-multi-valued-SAML-attribute673515

How to process a LDAP multi-valued attribute and return it as a multi-valued SAML attribute
Some methods using OGNL expressions to pull multi-valued attributes from an LDAP source, parse them and return the result as a multi-valued SAML attribute are described in detail.

Sep 8, 2014â€¢Knowledge
TITLE
How to process a LDAP multi-valued attribute and return it as a multi-valued SAML attribute
URL NAME
How-to-process-a-LDAP-multi-valued-attribute-and-return-it-as-a-multi-valued-SAML-attribute673515
ARTICLE NUMBER
000028134
PROBLEM DESCRIPTION
CONTENT
Problem:

What are some methods in OGNL to read in a multi-valued attribute from LDAP, such as a the group membership "memberOf" attribute in Active Directory, parse it and pass it into a SAML assertion as a multi-valued SAML attribute?

Solution:

EXAMPLE 1
The following example shows how Object-Graph Navigation Language (OGNL) can be used to parse a multi-valued attribute.  This example assumes PingFederate is being used to retrieve memberOf from a Directory Server prior to the Attribute Contract Fulfillment step and that the desired result is a multi-valued attribute of just the common names (CNs) from each group's distinguished name (DN).

 

OGNL Projections

This example uses OGNL Projections to iterate through a collection.  More information can be found at http://www.opensymphony.com/ognl/html/LanguageGuide/projection.html.  One exception to the official Projections documentation with PingFederate's implementation is that the '#this' variable reference doesn't work as described.  Instead we have to track an index (#i) and increment through the collection manually.

 

Using this Example

Since PingFederate evaluates the expression upon saving it in the editor, it is required that the 'ds.example' test attribute field have a DN-like value.  For example, CN=testing,DC=domain,DC=com.

This example prints a bit of debugging info to standard out, which should probably be removed in a production deployment.
This example is parsing DNs, but it doesn't support all possible DN values.  You would want to handle the scenario where the CN value actually contains a comma.  For example, CN=Admins\, Super Duper,DC=domain,DC=com.  Handling this would simply require a little more logic in the substring'ing.
 

#theCNValues = new java.util.ArrayList(),
@java.lang.System@out.println(" "),
@java.lang.System@out.println("-----Parsing Multivalued memberOf Attribute-----"),
#vals = #this.get("ds.memberOf").getValues(),
#i = 0,
#vals.{
	#val = #vals[#i],
	#newVal = #val.toString().substring(3, #val.indexOf(",")),
	@java.lang.System@out.println(#val + " => " + #newVal),
	#theCNValues.add(#newVal),
	#i = #i + 1
},
@java.lang.System@out.println(" "),
new org.sourceid.saml20.adapter.attribute.AttributeValue(#theCNValues)
 
EXAMPLE 2
 
Here's another example of iterating through an array that is slightly different. The objective is to extract from a list of groups only certain groups and return them.
 
#this.get("ds.memberOf").toString().replaceAll("\\[|\\]","").split(",\\s").
{?matches("CN=.*Admins.*")}

Explanation of the above code:

#this.get("ds.memberOf").toString() gets the list of groups the user is a member of as a string
This string is bracketed as an array object with a , delimiting each group. At least that is what is returned from AD
.replaceAll("\\[|\\]","") this removes the [ and ] in the String that is returned because this is an array
.split(",\\s")< splits each of groups into a separate string, they are delimited by a comma space sequence
.{?matches("CN=.*Admins.*")} this iterates through the array created by split and extracts all the groups that have a CN with Admins in the name
.{? is how to write a condition in the iteration, this sequences through the chain in the array
 

Wrap the above in new org.sourceid.saml20.adapter.attribute.AttributeValue() to get it back into a multi value attribute. The final expression looks like:

new org.sourceid.saml20.adapter.attribute.AttributeValue(#this.get("ds.memberOf")
.toString().replaceAll("\\[|\\]","").split(",\\s").{?matches("CN=.*Admins.*")})
